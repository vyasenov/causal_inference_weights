rm(list=ls())
library(MASS)
library(WeightIt)
set.seed(1988)
help(weightIt)
n <- 1000
X1 <- rnorm(n)
X2 <- rnorm(n)
W <- rbinom(n, 1, plogis(0.5 * X1 - 0.25 * X2))
Y <- 2 * W + X1 + X2 + rnorm(n)
ps_model <- glm(W ~ X1 + X2, family = binomial)
ps <- predict(ps_model, type = "response")
ips_weights <- ifelse(W == 1, 1 / ps, 1 / (1 - ps))
cb_weights <- weightit(W ~ X1 + X2, method = "cbps", data = data.frame(W, X1, X2))$weights
help(weightit)
help(weighted.mean)
ips_weights <- weightit(W ~ X1 + X2, method = "glm", data = data.frame(W, X1, X2))$weights
ebal_weights <- weightit(W ~ X1 + X2, method = "ebal", data = data.frame(W, X1, X2))$weights
cb_weights <- weightit(W ~ X1 + X2, method = "cbps", data = data.frame(W, X1, X2))$weights
ate_ips <- weighted.mean(Y[W==1], weights = ips_weights) - weighted.mean(Y[W==], weights = ips_weights)
ate_ips <- weighted.mean(Y[W==1], weights = ips_weights[W==1]) - weighted.mean(Y[W==0], weights = ips_weights[W==0])
# part of this code was generated by ChatGPT in Jan 2025
rm(list=ls())
library(MASS)
library(WeightIt)
set.seed(1988)
################
################ Generate Data
################
n <- 1000
X1 <- rnorm(n)
X2 <- rnorm(n)
W <- rbinom(n, 1, plogis(0.5 * X1 - 0.25 * X2))
Y <- 2 * W + X1 + X2 + rnorm(n)
data = data.frame(W, X1, X2)
################
################ Generate Weights
################
ips_weights <- weightit(W ~ X1 + X2, method = "glm", data=data)$weights
ebal_weights <- weightit(W ~ X1 + X2, method = "ebal", data=data)$weights
cb_weights <- weightit(W ~ X1 + X2, method = "cbps", data = data)$weights
ate_ips <- weighted.mean(Y, weights = ips_weights, data=data[W==1]) - weighted.mean(Y[W==0], weights = ips_weights[W==0])
# part of this code was generated by ChatGPT in Jan 2025
rm(list=ls())
library(MASS)
library(WeightIt)
set.seed(1988)
################
################ Generate Data
################
n <- 1000
X1 <- rnorm(n)
X2 <- rnorm(n)
W <- rbinom(n, 1, plogis(0.5 * X1 - 0.25 * X2))
Y <- 2 * W + X1 + X2 + rnorm(n)
data = data.frame(W, X1, X2)
################
################ Utility Functions
################
compute_weights <- function(method) {
weightit(W ~ X1 + X2, method = method, data = data)$weights
}
compute_ate <- function(weights) {
weighted.mean(Y, weights = weights, data = data[W == 1]) -
weighted.mean(Y, weights = weights, data = data[W == 0])
}
################
################ Generate Weights
################
ips_weights <- compute_weights("glm")
ebal_weights <- compute_weights("ebal")
cbps_weights <- compute_weights("cbps")
################
################ ATE Estimation
################
ips_ate <- compute_ate(ips_weights)
ebal_ate <- compute_ate(ebal_weights)
cbps_ate <- compute_ate(cbps_weights)
################
################ Print Results
################
cat("ATE (IPS Weights):", ips_ate, "\n")
cat("ATE (Entropy Balance Weights):", ebal_ate, "\n")
cat("ATE (CBPS Weights):", cbps_ate, "\n")
# part of this code was generated by ChatGPT in Jan 2025
rm(list=ls())
library(MASS)
library(WeightIt)
set.seed(1988)
################
################ Generate Data
################
n <- 1000
X1 <- rnorm(n)
X2 <- rnorm(n)
W <- rbinom(n, 1, plogis(0.5 * X1 - 0.25 * X2))
Y <- 2 * W + X1 + X2 + rnorm(n)
data = data.frame(W, X1, X2)
################
################ Utility Functions
################
compute_weights <- function(method) {
weightit(W ~ X1 + X2, method = method, data = data)$weights
}
compute_ate <- function(weights) {
weighted.mean(Y, weights = weights, data = subset(data, W==1)) -
weighted.mean(Y, weights = weights, data = subset(data, W==0))
}
################
################ Generate Weights
################
ips_weights <- compute_weights("glm")
ebal_weights <- compute_weights("ebal")
cbps_weights <- compute_weights("cbps")
################
################ ATE Estimation
################
ips_ate <- compute_ate(ips_weights)
ebal_ate <- compute_ate(ebal_weights)
cbps_ate <- compute_ate(cbps_weights)
################
################ Print Results
################
cat("ATE (IPS Weights):", ips_ate, "\n")
cat("ATE (Entropy Balance Weights):", ebal_ate, "\n")
cat("ATE (CBPS Weights):", cbps_ate, "\n")
summary(ips_weights)
cor(ips_weights, ebal_weights)
cor(ips_weights, cbps_weights)
cor(cbps_weights, ebal_weights)
ips_ate <- compute_ate(ips_weights)
ebal_ate <- compute_ate(ebal_weights)
cbps_ate <- compute_ate(cbps_weights)
# part of this code was generated by ChatGPT in Jan 2025
rm(list=ls())
library(MASS)
library(WeightIt)
set.seed(1988)
################
################ Generate Data
################
n <- 1000
X1 <- rnorm(n)
X2 <- rnorm(n)
W <- rbinom(n, 1, plogis(0.5 * X1 - 0.25 * X2))
Y <- 3 + 2 * W + X1 + X2 + rnorm(n)
data = data.frame(W, X1, X2)
################
################ Utility Functions
################
compute_weights <- function(method) {
weightit(W ~ X1 + X2, method = method, data = data)$weights
}
compute_ate <- function(weights) {
weighted.mean(Y, weights = weights, data = subset(data, W==1)) -
weighted.mean(Y, weights = weights, data = subset(data, W==0))
}
################
################ Generate Weights
################
ips_weights <- compute_weights("glm")
ebal_weights <- compute_weights("ebal")
cbps_weights <- compute_weights("cbps")
summary(ips_weights)
summary(ebal_weights)
summary(cbps_weights)
cor(ips_weights, ebal_weights)
cor(ips_weights, cbps_weights)
cor(cbps_weights, ebal_weights)
################
################ ATE Estimation
################
ips_ate <- compute_ate(ips_weights)
ebal_ate <- compute_ate(ebal_weights)
cbps_ate <- compute_ate(cbps_weights)
################
################ Print Results
################
cat("ATE (IPS Weights):", ips_ate, "\n")
cat("ATE (Entropy Balance Weights):", ebal_ate, "\n")
cat("ATE (CBPS Weights):", cbps_ate, "\n")
head(data)
# part of this code was generated by ChatGPT in Jan 2025
rm(list=ls())
library(MASS)
library(WeightIt)
set.seed(1988)
################
################ Generate Data
################
n <- 1000
X1 <- rnorm(n)
X2 <- rnorm(n)
W <- rbinom(n, 1, plogis(0.5 * X1 - 0.25 * X2))
Y <- 3 + 2 * W + X1 + X2 + rnorm(n)
data = data.frame(Y, W, X1, X2)
head(data)
################
################ Utility Functions
################
compute_weights <- function(method) {
weightit(W ~ X1 + X2, method = method, data = data)$weights
}
compute_ate <- function(weights) {
weighted.mean(Y, weights = weights, data = subset(data, W==1)) -
weighted.mean(Y, weights = weights, data = subset(data, W==0))
}
################
################ Generate Weights
################
ips_weights <- compute_weights("glm")
ebal_weights <- compute_weights("ebal")
cbps_weights <- compute_weights("cbps")
summary(ips_weights)
summary(ebal_weights)
summary(cbps_weights)
cor(ips_weights, ebal_weights)
cor(ips_weights, cbps_weights)
cor(cbps_weights, ebal_weights)
################
################ ATE Estimation
################
ips_ate <- compute_ate(ips_weights)
ebal_ate <- compute_ate(ebal_weights)
cbps_ate <- compute_ate(cbps_weights)
################
################ Print Results
################
cat("ATE (IPS Weights):", ips_ate, "\n")
cat("ATE (Entropy Balance Weights):", ebal_ate, "\n")
cat("ATE (CBPS Weights):", cbps_ate, "\n")
# part of this code was generated by ChatGPT in Jan 2025
rm(list=ls())
library(MASS)
library(WeightIt)
set.seed(1988)
################
################ Generate Data
################
n <- 1000
X1 <- rnorm(n)
X2 <- rnorm(n)
W <- rbinom(n, 1, plogis(0.5 * X1 - 0.25 * X2))
Y <- 3 + 2 * W + X1 + X2 + rnorm(n)
data = data.frame(Y, W, X1, X2)
head(data)
################
################ Utility Functions
################
compute_weights <- function(method) {
weightit(W ~ X1 + X2, method = method, data = data)$weights
}
compute_ate <- function(weights) {
weighted.mean(Y[W == 1], weights = weights[W == 1]) -
weighted.mean(Y[W == 0], weights = weights[W == 0])
}
################
################ Generate Weights
################
ips_weights <- compute_weights("glm")
ebal_weights <- compute_weights("ebal")
cbps_weights <- compute_weights("cbps")
summary(ips_weights)
summary(ebal_weights)
summary(cbps_weights)
cor(ips_weights, ebal_weights)
cor(ips_weights, cbps_weights)
cor(cbps_weights, ebal_weights)
################
################ ATE Estimation
################
ips_ate <- compute_ate(ips_weights)
ebal_ate <- compute_ate(ebal_weights)
cbps_ate <- compute_ate(cbps_weights)
################
################ Print Results
################
cat("ATE (IPS Weights):", ips_ate, "\n")
cat("ATE (Entropy Balance Weights):", ebal_ate, "\n")
cat("ATE (CBPS Weights):", cbps_ate, "\n")
